name: Daily Work Thread Creation

on:
  schedule:
    - cron: '0 15 * * *'  # 00:00 JST
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  create-and-close-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set date variables
        id: date-check
        run: |
          TODAY=$(date +'%Y%m%d')
          TODAY_FORMATTED=$(date +'%Y-%m-%d')
          YESTERDAY=$(date -d "@$(($(date +%s) - 86400))" +'%Y-%m-%d')
          
          echo "today=$TODAY_FORMATTED" >> $GITHUB_ENV
          echo "yesterday=$YESTERDAY" >> $GITHUB_ENV
          echo "today_numeric=$TODAY" >> $GITHUB_ENV

      - name: Create and manage work threads
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const today = process.env.today;
            const yesterday = process.env.yesterday;
            const todayNumeric = process.env.today_numeric;
            
            const endDate =  '2025-05-24';
            const titleTemplate =  '作業すれ: $DATE';
            
            const endDateNumeric = endDate.replace(/-/g, '');
            
            if (parseInt(todayNumeric) > parseInt(endDateNumeric)) {
              console.log(`Workflow stopped: Current date (${today}) is after end date (${endDate})`);
              return;
            }
            
            let issueBody = '';
            try {
              const templatePath = path.join('.github', 'ISSUE_TEMPLATE.md');
              
              if (fs.existsSync(templatePath)) {
                issueBody = fs.readFileSync(templatePath, 'utf8');
                issueBody = issueBody.replace(/\$DATE/g, today);
              } else {
                const bodyTemplate = '${{ vars.WORK_THREAD_BODY }}' || '$DATE work thread. Add your tasks here.';
                issueBody = bodyTemplate.replace(/\$DATE/g, today);
              }
            } catch (error) {
              const bodyTemplate = '${{ vars.WORK_THREAD_BODY }}' || '$DATE work thread. Add your tasks here.';
              issueBody = bodyTemplate.replace(/\$DATE/g, today);
            }
            
            const todayTitle = titleTemplate.replace(/\$DATE/g, today);
            
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: todayTitle,
              body: issueBody,
              labels: ['daily-work-thread']
            });
            
            const yesterdayTitle = titleTemplate.replace(/\$DATE/g, yesterday);
            
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc'
            });
            
            const yesterdayIssue = issues.data.find(issue => issue.title === yesterdayTitle);
            
            if (yesterdayIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: yesterdayIssue.number,
                state: 'closed'
              });
            }
